name: Test
on:
  push:
    branches:
      - master
  pull_request:
jobs:
  test:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        go:
          - 1.19.x
    name: Test with Go ${{ matrix.go }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      DISPLAY: :99.0
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
          cache: true

      - name: Install dependencies
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        run: |
          sudo apt-get update
          sudo apt-get install libasound2-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev

      - name: Install wasmbrowsertest
        run: |
          go install github.com/agnivade/wasmbrowsertest@latest
          mv $(go env GOPATH)/bin/wasmbrowsertest${{ startsWith(matrix.os, 'windows-') && '.exe' || '' }} $(go env GOPATH)/bin/go_js_wasm_exec${{ startsWith(matrix.os, 'windows-') && '.exe' || '' }}

      - name: Xvfb
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: go vet
        run: |
          go vet -v ./...

      - name: go build
        run: |
          go build -v .
          # Compile without optimization to check potential stack overflow.
          # The option '-gcflags=all=-N -l' is often used at Visual Studio Code.
          # See also https://go.googlesource.com/vscode-go/+/HEAD/docs/debugging.md#launch and the issue #2120.
          go build "-gcflags=all=-N -l" -v .
          env GOOS=js GOARCH=wasm go build -v .
          env GOOS=windows GOARCH=386 go build -v .
          env GOOS=windows GOARCH=amd64 go build -v .
          env GOOS=windows GOARCH=arm go build -v .

      - name: go build (Windows ARM64)
        run: |
          env GOOS=windows GOARCH=arm64 go build -v .

      - name: go build (macOS)
        if: ${{ startsWith(matrix.os, 'macos-') }}
        run: |
          env CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -v -o game_amd64 .
          env CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -v -o game_arm64 .
          lipo -create game_amd64 game_arm64 -output game_universal
          file game_universal
          rm game_universal

      - name: go test
        if: ${{ startsWith(matrix.os, 'ubuntu-') || startsWith(matrix.os, 'windows-') }}
        run: |
          go test -shuffle=on -v .

      - name: go test (Linux 386)
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install gcc-multilib
          sudo apt-get install libasound2-dev:i386 libgl1-mesa-dev:i386 libxcursor-dev:i386 libxi-dev:i386 libxinerama-dev:i386 libxrandr-dev:i386 libxxf86vm-dev:i386
          env CGO_ENABLED=1 GOARCH=386 go test -shuffle=on -v .

      - name: go test (Windows 386)
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: |
          env GOARCH=386 go test -shuffle=on -v .

      - name: go test (Wasm)
        run: |
          env GOOS=js GOARCH=wasm go test -shuffle=on -v .
          env GOOS=js GOARCH=wasm EBITENGINE_OPENGL=webgl1 go test -shuffle=on -v .
